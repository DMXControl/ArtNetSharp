using ArtNetSharp;
using RDMSharp;
using RDMSharp.ParameterWrapper;
using System.Linq;

namespace ArtNetTests
{
    public class ArtPollReplyBinaryTests
    {
        [Test]
        public void TestLuminode1_FW_2_6_0()
        {
            byte[] data = [
                0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
                0x00, 0x21, 0x02, 0xa4, 0x4d, 0xbe, 0x36, 0x19,
                0x02, 0x06, 0x00, 0x00, 0x29, 0xde, 0x00, 0xe3,
                0x4c, 0x4c, 0x4c, 0x75, 0x6d, 0x69, 0x4e, 0x6f,
                0x64, 0x65, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x4c, 0x75, 0x6d, 0x69,
                0x4e, 0x6f, 0x64, 0x65, 0x31, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
                0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xd0, 0x69, 0x9e, 0x9d, 0x4d, 0xbe, 0x02,
                0xa4, 0x4d, 0xbe, 0x01, 0x19, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            ArtPollReply? artPollReply = null;
            Assert.DoesNotThrow(() => artPollReply = new ArtPollReply(data));
            Assert.That(artPollReply, Is.Not.Null);
            Assert.That(artPollReply.LongName, Is.EqualTo("LumiNode1"));
            Assert.That(artPollReply.ShortName, Is.EqualTo("LumiNode1"));
            Assert.That(artPollReply.MAC, Is.EqualTo(new MACAddress("d0:69:9e:9d:4d:be")));
            Assert.That(artPollReply.OwnIp, Is.EqualTo(new IPv4Address("2.164.77.190")));
            Assert.That(artPollReply.BindIp, Is.EqualTo(new IPv4Address("2.164.77.190")));
            Assert.That(artPollReply.OemCode, Is.EqualTo(0x29de));
            Assert.That(artPollReply.ManufacturerCode, Is.EqualTo(0x4c4c));
            Assert.That(artPollReply.Style, Is.EqualTo(EStCodes.StNode));
            Assert.That(artPollReply.Ports, Is.EqualTo(1));
            Assert.That(artPollReply.PortTypes, Has.Length.EqualTo(1));
            Assert.That(artPollReply.PortTypes[0], Is.EqualTo(EPortType.OutputFromArtNet));
            Assert.That(artPollReply.OutputUniverses, Has.Length.EqualTo(1));
            Assert.That(artPollReply.OutputUniverses[0], Is.EqualTo((Universe)0));
            Assert.That(artPollReply.InputUniverses, Has.Length.EqualTo(1));
            Assert.That(artPollReply.InputUniverses[0], Is.EqualTo((Universe)0));
            Assert.That(artPollReply.GoodOutput, Has.Length.EqualTo(1));
            Assert.That(artPollReply.GoodInput, Has.Length.EqualTo(1));

            Assert.That(artPollReply.GetPacket().Take(data.Length), Is.EqualTo(data));
        }

        [Test]
        public void TestELC_Node8gbx_FW_1_51()
        {
            byte[] data = [
                0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
                0x00, 0x21, 0x02, 0x01, 0x10, 0x87, 0x36, 0x19,
                0x01, 0x0e, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x02,
                0x6c, 0x65, 0x64, 0x6d, 0x58, 0x4c, 0x41, 0x4e,
                0x20, 0x6e, 0x6f, 0x64, 0x65, 0x47, 0x42, 0x78,
                0x38, 0x00, 0x00, 0x00, 0x64, 0x6d, 0x58, 0x4c,
                0x41, 0x4e, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x47,
                0x42, 0x78, 0x38, 0x20, 0x49, 0x44, 0x3a, 0x30,
                0x30, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x80, 0x80,
                0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11,
                0x12, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x1f, 0x80, 0x01, 0x10, 0x87, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            ArtPollReply? artPollReply = null;
            Assert.DoesNotThrow(() => artPollReply = new ArtPollReply(data));
            Assert.That(artPollReply, Is.Not.Null);
            Assert.That(artPollReply.LongName, Is.EqualTo("dmXLAN nodeGBx8 ID:003"));
            Assert.That(artPollReply.ShortName, Is.EqualTo("dmXLAN nodeGBx8"));
            Assert.That(artPollReply.MAC, Is.EqualTo(new MACAddress("00:1f:80:01:10:87")));
            Assert.That(artPollReply.OwnIp, Is.EqualTo(new IPv4Address("2.1.16.135")));
            Assert.That(artPollReply.BindIp, Is.EqualTo(new IPv4Address("0.0.0.0")));
            Assert.That(artPollReply.OemCode, Is.EqualTo(0x009e));
            Assert.That(artPollReply.ManufacturerCode, Is.EqualTo(0x656c));
            Assert.That(artPollReply.Style, Is.EqualTo(EStCodes.StNode));
            Assert.That(artPollReply.Ports, Is.EqualTo(4));
            Assert.That(artPollReply.PortTypes, Has.Length.EqualTo(4));
            Assert.That(artPollReply.OutputUniverses, Has.Length.EqualTo(4));
            Assert.That(artPollReply.InputUniverses, Has.Length.EqualTo(4));
            Assert.That(artPollReply.GoodOutput, Has.Length.EqualTo(4));
            Assert.That(artPollReply.GoodInput, Has.Length.EqualTo(4));
            for (byte port = 0; port < artPollReply.Ports; port++)
            {
                Assert.That(artPollReply.PortTypes[port], Is.EqualTo(EPortType.OutputFromArtNet));
                Assert.That(artPollReply.OutputUniverses[port], Is.EqualTo((Address)(16+port)));
                Assert.That(artPollReply.InputUniverses[port], Is.EqualTo((Address)0));
            }
            Assert.That(artPollReply.GetPacket().Take(data.Length), Is.EqualTo(data));
        }

        [Test]
        public void TestAsteraTitanBox_FW_1_21()
        {
            byte[] data = [
                0x41, 0x72, 0x74, 0x2d, 0x4e, 0x65, 0x74, 0x00,
                0x00, 0x21, 0x0a, 0x8d, 0x77, 0x6c, 0x36, 0x19,
                0x01, 0x15, 0x00, 0x00, 0x29, 0x4e, 0x00, 0xe0,
                0x73, 0x41, 0x54, 0x69, 0x74, 0x61, 0x6e, 0x20,
                0x50, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x78,
                0x00, 0x4d, 0x61, 0x64, 0x46, 0x20, 0x50, 0x42,
                0x33, 0x20, 0x55, 0x34, 0x37, 0x00, 0x72, 0x42,
                0x6f, 0x78, 0x00, 0x4d, 0x61, 0x64, 0x72, 0x69,
                0x78, 0x4e, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
                0x94, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
                0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x49, 0x4e, 0x46,
                0x00, 0x69, 0x6e, 0x66, 0x00, 0x4e, 0x41, 0x4e,
                0x00, 0x6e, 0x61, 0x6e, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00,
                0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x81, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xc4, 0x4f, 0x33, 0x16, 0x77, 0x6c, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ];

            ArtPollReply? artPollReply = null;
            Assert.DoesNotThrow(() => artPollReply = new ArtPollReply(data));
            Assert.That(artPollReply, Is.Not.Null);
            Assert.That(artPollReply.LongName, Is.EqualTo("F PB3 U47"));
            Assert.That(artPollReply.ShortName, Is.EqualTo("Titan PowerBox"));
            Assert.That(artPollReply.MAC, Is.EqualTo(new MACAddress("c4:4f:33:16:77:6c")));
            Assert.That(artPollReply.OwnIp, Is.EqualTo(new IPv4Address("10.141.119.108")));
            Assert.That(artPollReply.BindIp, Is.EqualTo(new IPv4Address("0.0.0.0")));
            Assert.That(artPollReply.OemCode, Is.EqualTo(0x294e));
            Assert.That(artPollReply.ManufacturerCode, Is.EqualTo(0x4173));
            Assert.That(artPollReply.Style, Is.EqualTo(EStCodes.StNode));
            Assert.That(artPollReply.Ports, Is.EqualTo(1));
            Assert.That(artPollReply.PortTypes, Has.Length.EqualTo(1));
            Assert.That(artPollReply.PortTypes[0], Is.EqualTo(EPortType.OutputFromArtNet));
            Assert.That(artPollReply.OutputUniverses, Has.Length.EqualTo(1));
            Assert.That(artPollReply.OutputUniverses[0], Is.EqualTo((Universe)14));
            Assert.That(artPollReply.InputUniverses, Has.Length.EqualTo(1));
            Assert.That(artPollReply.InputUniverses[0], Is.EqualTo((Universe)0));
            Assert.That(artPollReply.GoodOutput, Has.Length.EqualTo(1));
            Assert.That(artPollReply.GoodInput, Has.Length.EqualTo(1));

            Assert.That(artPollReply.GetPacket().Take(data.Length), Is.Not.EqualTo(data));// Because of Trailing stray characters in given Data-Packet
        }
    }
}